{"version":3,"sources":["components/BooksScreen.js","components/BookDetailScreen.js","components/AddBookScreen.js","components/EditBookScreen.js","App.js"],"names":["GET_BOOKS","gql","BooksScreen","keyExtractor","item","index","toString","renderItem","title","onPress","props","navigation","navigate","id","_id","chevron","bottomDivider","pollInterval","query","loading","error","data","View","style","styles","activity","ActivityIndicator","size","color","Text","message","FlatList","books","Component","navigationOptions","headerRight","buttonStyle","padding","backgroundColor","icon","name","marginRight","fontSize","push","StyleSheet","create","container","flex","paddingBottom","height","position","left","right","top","bottom","alignItems","justifyContent","GET_BOOK","DELETE_BOOK","BookDetailScreen","this","variables","bookId","getParam","ScrollView","subContainer","fontWeight","marginBottom","book","isbn","author","description","published_year","publisher","updated_date","mutation","onCompleted","goBack","removeBook","loading2","error2","detailButton","large","leftIcon","then","res","catch","err","borderBottomWidth","borderBottomColor","marginTop","ADD_BOOK","AddBookScreen","state","updateTextInput","text","field","setState","addBook","TextInput","textInput","placeholder","value","onChangeText","multiline","numberOfLines","keyboardType","parseInt","margin","UPDATE_BOOK","EditBookScreen","updateBook","defaultValue","MainNavigator","createStackNavigator","Book","screen","BookDetails","AddBook","EditBook","MyRootComponent","createAppContainer","cache","InMemoryCache","client","ApolloClient","link","HttpLink","uri","App","AppRegistry","registerComponent"],"mappings":"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","file":"static/js/app.4ae3a0a7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { StyleSheet, FlatList, ActivityIndicator, View, Text } from 'react-native';\r\nimport { ListItem, Button } from 'react-native-elements';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\n\r\nconst GET_BOOKS = gql`\r\n {\r\n  books {\r\n   _id\r\n   title\r\n   author\r\n  }\r\n }\r\n`;\r\n\r\n\r\nclass BooksScreen extends Component {\r\n\r\n    static navigationOptions = ({ navigation }) => {\r\n        return {\r\n          title: 'LIST OF BOOKS',\r\n          headerRight: (\r\n          <Button\r\n            buttonStyle={{ padding: 0, backgroundColor: 'transparent' }}\r\n            icon={{ name: 'add-circle', style: { marginRight: 0, fontSize: 28 } }}\r\n            onPress={() => { navigation.push('AddBook') }}\r\n          />\r\n          ),\r\n        };\r\n      };\r\n\r\n      keyExtractor = (item, index) => index.toString()\r\n\r\n      renderItem = ({ item }) => (\r\n        <ListItem\r\n          title={item.title}\r\n          onPress={() => {\r\n            this.props.navigation.navigate('BookDetails', {\r\n              id: `${item._id}`,\r\n            });\r\n          }}\r\n          chevron\r\n          bottomDivider\r\n        />\r\n      )\r\n      \r\n      render() {\r\n        return (\r\n          <Query pollInterval={500} query={GET_BOOKS}>\r\n            {({ loading, error, data }) => {\r\n              if (loading) return(\r\n                <View style={styles.activity}>\r\n                  <ActivityIndicator size=\"large\" color=\"#0000ff\"/>\r\n                </View>\r\n              );\r\n              if (error) return(\r\n                <View style={styles.activity}>\r\n                  <Text>`Error! ${error.message}`</Text>\r\n                </View>\r\n              );\r\n              return (\r\n                <FlatList\r\n                  keyExtractor={this.keyExtractor}\r\n                  data={data.books}\r\n                  renderItem={this.renderItem}\r\n                />\r\n              );\r\n            }}\r\n          </Query>\r\n        );\r\n      }\r\n    }\r\n\r\n    const styles = StyleSheet.create({\r\n        container: {\r\n          flex: 1,\r\n          paddingBottom: 22\r\n        },\r\n        item: {\r\n          padding: 10,\r\n          fontSize: 18,\r\n          height: 44,\r\n        },\r\n        activity: {\r\n          position: 'absolute',\r\n          left: 0,\r\n          right: 0,\r\n          top: 0,\r\n          bottom: 0,\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }\r\n       })\r\n    \r\nexport default BooksScreen;\r\n","import React, { Component } from 'react';\r\nimport { ScrollView, StyleSheet, ActivityIndicator, View, Text } from 'react-native';\r\nimport { Card, Button } from 'react-native-elements';\r\nimport gql from 'graphql-tag';\r\nimport { Query, Mutation } from 'react-apollo';\r\n\r\nconst GET_BOOK = gql`\r\n  query book($bookId: String) {\r\n    book(id: $bookId) {\r\n      _id\r\n      isbn\r\n      title\r\n      author\r\n      description\r\n      published_year\r\n      publisher\r\n      updated_date\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_BOOK = gql`\r\n mutation removeBook($id: String!) {\r\n  removeBook(id:$id) {\r\n   _id\r\n  }\r\n }\r\n`;\r\n\r\nclass BookDetailScreen extends Component {\r\n    static navigationOptions = {\r\n     title: 'Book Details',\r\n    };\r\n    render() {\r\n     const { navigation } = this.props;\r\n     return (\r\n       <Query pollInterval={500} query={GET_BOOK} variables={{ bookId: navigation.getParam('id') }}>\r\n         {({ loading, error, data }) => {\r\n           if (loading) return(<View style={styles.activity}>\r\n             <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n            </View>);\r\n           if (error) return(<Text>`Error! ${error.message}`</Text>);\r\n           return (\r\n             <ScrollView>\r\n               <Card style={styles.container}>\r\n                 <View style={styles.subContainer}>\r\n                   <View>\r\n                     <Text style={{fontSize: 16, fontWeight: 'bold'}}>ISBN:</Text>\r\n                     <Text style={{fontSize: 18, marginBottom: 10}}>{data.book.isbn}</Text>\r\n                   </View>\r\n                   <View>\r\n                     <Text style={{fontSize: 16, fontWeight: 'bold'}}>Title: </Text>\r\n                     <Text style={{fontSize: 18, marginBottom: 10}}>{data.book.title}</Text>\r\n                   </View>\r\n                   <View>\r\n                     <Text style={{fontSize: 16, fontWeight: 'bold'}}>Author: </Text>\r\n                     <Text style={{fontSize: 18, marginBottom: 10}}>{data.book.author}</Text>\r\n                   </View>\r\n                   <View>\r\n                     <Text style={{fontSize: 16, fontWeight: 'bold'}}>Description: </Text>\r\n                     <Text style={{fontSize: 18, marginBottom: 10}}>{data.book.description}</Text>\r\n                   </View>\r\n                   <View>\r\n                     <Text style={{fontSize: 16, fontWeight: 'bold'}}>Published Year: </Text>\r\n                     <Text style={{fontSize: 18, marginBottom: 10}}>{data.book.published_year}</Text>\r\n                   </View>\r\n                   <View>\r\n                     <Text style={{fontSize: 16, fontWeight: 'bold'}}>Publisher: </Text>\r\n                     <Text style={{fontSize: 18, marginBottom: 10}}>{data.book.publisher}</Text>\r\n                   </View>\r\n                   <View>\r\n                     <Text style={{fontSize: 16, fontWeight: 'bold'}}>Updated Date: </Text>\r\n                     <Text style={{fontSize: 18}}>{data.book.updated_date}</Text>\r\n                   </View>\r\n                 </View>\r\n                 <Mutation mutation={DELETE_BOOK} key={data.book._id} onCompleted={() => navigation.goBack()}>\r\n                   {(removeBook, { loading2, error2 }) => (\r\n                     <View style={styles.subContainer}>\r\n                       <Button\r\n                       style={styles.detailButton}\r\n                       large\r\n                       backgroundColor={'#CCCCCC'}\r\n                       leftIcon={{name: 'edit'}}\r\n                       title='Edit'\r\n                       onPress={() => {\r\n                         navigation.navigate('EditBook', { id: `${data.book._id}`, });\r\n                       }} />\r\n                       <Button\r\n                       style={styles.detailButton}\r\n                       large\r\n                       backgroundColor={'#999999'}\r\n                       color={'#FFFFFF'}\r\n                       leftIcon={{name: 'delete'}}\r\n                       title='Delete'\r\n                       onPress={() => {\r\n                         removeBook({ variables: { id: data.book._id } })\r\n                         .then(res => res)\r\n                         .catch(err => <Text>{err}</Text>);\r\n                       }} />\r\n                       {loading2 && <View style={styles.activity}>\r\n                         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n                        </View>}\r\n                       {error2 && <Text>`Error! ${error2.message}`</Text>}\r\n                     </View>\r\n                   )}\r\n                 </Mutation>\r\n               </Card>\r\n             </ScrollView>\r\n           );\r\n         }}\r\n       </Query>\r\n     );\r\n    }\r\n   }\r\n\r\n   const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      padding: 20\r\n    },\r\n    subContainer: {\r\n      flex: 1,\r\n      paddingBottom: 20,\r\n      borderBottomWidth: 2,\r\n      borderBottomColor: '#CCCCCC',\r\n    },\r\n    activity: {\r\n      position: 'absolute',\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0,\r\n      alignItems: 'center',\r\n      justifyContent: 'center'\r\n    },\r\n    detailButton: {\r\n      marginTop: 10\r\n    }\r\n  }) \r\n\r\nexport default BookDetailScreen;","import React, { Component } from 'react';\r\nimport { StyleSheet, ScrollView, ActivityIndicator, View, TextInput, Text } from 'react-native';\r\nimport { Button } from 'react-native-elements';\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation } from \"react-apollo\";\r\n\r\nconst ADD_BOOK = gql`\r\n  mutation AddBook(\r\n    $isbn: String!,\r\n    $title: String!,\r\n    $author: String!,\r\n    $description: String!,\r\n    $publisher: String!,\r\n    $published_year: Int!) {\r\n    addBook(\r\n      isbn: $isbn,\r\n      title: $title,\r\n      author: $author,\r\n      description: $description,\r\n      publisher: $publisher,\r\n      published_year: $published_year) {\r\n      _id\r\n    }\r\n  }\r\n`;\r\n\r\nclass AddBookScreen extends Component {\r\n static navigationOptions = {\r\n  title: 'Add Book',\r\n };\r\n state = {\r\n    isbn: '',\r\n    title: '',\r\n    author: '',\r\n    description: '',\r\n    published_year: '',\r\n    publisher: '',\r\n   }\r\n   updateTextInput = (text, field) => {\r\n    const state = this.state\r\n    state[field] = text;\r\n    this.setState(state);\r\n   }\r\n   \r\n   render() {\r\n    const { isbn, title, author, description, published_year, publisher } = this.state;\r\n    return (\r\n     <Mutation mutation={ADD_BOOK} onCompleted={() => this.props.navigation.goBack()}>\r\n       {(addBook, { loading, error }) => (\r\n        <ScrollView style={styles.container}>\r\n         <View style={styles.subContainer}>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            placeholder={'ISBN'}\r\n            value={this.state.isbn}\r\n            onChangeText={(text) => this.updateTextInput(text, 'isbn')}\r\n          />\r\n         </View>\r\n         <View style={styles.subContainer}>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            placeholder={'Title'}\r\n            value={this.state.title}\r\n            onChangeText={(text) => this.updateTextInput(text, 'title')}\r\n          />\r\n         </View>\r\n         <View style={styles.subContainer}>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            placeholder={'Author'}\r\n            value={this.state.author}\r\n            onChangeText={(text) => this.updateTextInput(text, 'author')}\r\n          />\r\n         </View>\r\n         <View style={styles.subContainer}>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            placeholder={'Description'}\r\n            multiline={true}\r\n            numberOfLines={4}\r\n            value={this.state.description}\r\n            onChangeText={(text) => this.updateTextInput(text, 'description')}\r\n          />\r\n         </View>\r\n         <View style={styles.subContainer}>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            placeholder={'Published Year'}\r\n            value={this.state.published_year}\r\n            keyboardType='numeric'\r\n            onChangeText={(text) => this.updateTextInput(text, 'published_year')}\r\n          />\r\n         </View>\r\n         <View style={styles.subContainer}>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            placeholder={'Publisher'}\r\n            value={this.state.publisher}\r\n            onChangeText={(text) => this.updateTextInput(text, 'publisher')}\r\n          />\r\n         </View>\r\n         <View>\r\n          <Button\r\n           large\r\n           leftIcon={{name: 'save'}}\r\n           title='Save'\r\n           onPress={() => {\r\n            addBook({\r\n             variables: {\r\n              isbn: this.state.isbn,\r\n              title: this.state.title,\r\n              author: this.state.author,\r\n              description: this.state.description,\r\n              publisher: this.state.publisher,\r\n              published_year: parseInt(this.state.published_year),\r\n             }\r\n            })\r\n             .then(res => this.setState({ isbn: '', title: '', author: '', description: '', published_year: '', publisher }))\r\n             .catch(err => <Text>{err}</Text>);\r\n           }} />\r\n         </View>\r\n         {loading && <View style={styles.activity}>\r\n           <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n          </View>}\r\n         {error && <Text>`Error! ${error.message}`</Text>}\r\n        </ScrollView>\r\n       )}\r\n      </Mutation>\r\n    );\r\n   }\r\n  \r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n     flex: 1,\r\n     padding: 20\r\n    },\r\n    subContainer: {\r\n     flex: 1,\r\n     marginBottom: 20,\r\n     padding: 5,\r\n     borderBottomWidth: 2,\r\n     borderBottomColor: '#CCCCCC',\r\n    },\r\n    activity: {\r\n     position: 'absolute',\r\n     left: 0,\r\n     right: 0,\r\n     top: 0,\r\n     bottom: 0,\r\n     alignItems: 'center',\r\n     justifyContent: 'center'\r\n    },\r\n    textInput: {\r\n     fontSize: 18,\r\n     margin: 5,\r\n    },\r\n   })\r\n\r\nexport default AddBookScreen;\r\n","import React, { Component } from 'react';\r\nimport { StyleSheet, ScrollView, ActivityIndicator, View, TextInput, Text } from 'react-native';\r\nimport { Button } from 'react-native-elements';\r\nimport gql from \"graphql-tag\";\r\nimport { Query, Mutation } from \"react-apollo\";\r\n\r\nconst GET_BOOK = gql`\r\n  query book($bookId: String) {\r\n    book(id: $bookId) {\r\n      _id\r\n      isbn\r\n      title\r\n      author\r\n      description\r\n      published_year\r\n      publisher\r\n      updated_date\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_BOOK = gql`\r\n  mutation updateBook(\r\n    $id: String!,\r\n    $isbn: String!,\r\n    $title: String!,\r\n    $author: String!,\r\n    $description: String!,\r\n    $publisher: String!,\r\n    $published_year: Int!) {\r\n    updateBook(\r\n    id: $id,\r\n    isbn: $isbn,\r\n    title: $title,\r\n    author: $author,\r\n    description: $description,\r\n    publisher: $publisher,\r\n    published_year: $published_year) {\r\n      updated_date\r\n    }\r\n  }\r\n`;\r\n\r\nclass EditBookScreen extends Component {\r\n static navigationOptions = {\r\n  title: 'Edit Book',\r\n };\r\n state = {\r\n    isbn: '',\r\n    title: '',\r\n    author: '',\r\n    description: '',\r\n    published_year: '',\r\n    publisher: '',\r\n   }\r\n   updateTextInput = (text, field) => {\r\n    const state = this.state\r\n    state[field] = text;\r\n    this.setState(state);\r\n   }\r\n   render() {\r\n    const { navigation } = this.props;\r\n    const { isbn, title, author, description, published_year, publisher } = this.state;\r\n    return (\r\n     <Query query={GET_BOOK} variables={{ bookId: navigation.getParam('id') }}>\r\n      {({ loading, error, data }) => {\r\n       if (loading) return(<View style={styles.activity}>\r\n         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n        </View>);\r\n       if (error) return(<Text>`Error! ${error.message}`</Text>);\r\n       return (\r\n        <Mutation mutation={UPDATE_BOOK} key={data.book._id} onCompleted={() => navigation.goBack()}>\r\n         {(updateBook, { loading2, error2 }) => (\r\n          <ScrollView style={styles.container}>\r\n           <View style={styles.subContainer}>\r\n            <TextInput\r\n              style={styles.textInput}\r\n              placeholder={'ISBN'}\r\n              defaultValue={data.book.isbn}\r\n              onChangeText={(text) => this.updateTextInput(text, 'isbn')}\r\n            />\r\n           </View>\r\n           <View style={styles.subContainer}>\r\n            <TextInput\r\n              style={styles.textInput}\r\n              placeholder={'Title'}\r\n              defaultValue={data.book.title}\r\n              onChangeText={(text) => this.updateTextInput(text, 'title')}\r\n            />\r\n           </View>\r\n           <View style={styles.subContainer}>\r\n            <TextInput\r\n              style={styles.textInput}\r\n              placeholder={'Author'}\r\n              defaultValue={data.book.author}\r\n              onChangeText={(text) => this.updateTextInput(text, 'author')}\r\n            />\r\n           </View>\r\n           <View style={styles.subContainer}>\r\n            <TextInput\r\n              style={styles.textInput}\r\n              placeholder={'Description'}\r\n              multiline={true}\r\n              numberOfLines={4}\r\n              defaultValue={data.book.description}\r\n              onChangeText={(text) => this.updateTextInput(text, 'description')}\r\n            />\r\n           </View>\r\n           <View style={styles.subContainer}>\r\n            <TextInput\r\n              style={styles.textInput}\r\n              placeholder={'Published Year'}\r\n              defaultValue={data.book.published_year.toString()}\r\n              keyboardType='numeric'\r\n              onChangeText={(text) => this.updateTextInput(text, 'published_year')}\r\n            />\r\n           </View>\r\n           <View style={styles.subContainer}>\r\n            <TextInput\r\n              style={styles.textInput}\r\n              placeholder={'Publisher'}\r\n              defaultValue={data.book.publisher}\r\n              onChangeText={(text) => this.updateTextInput(text, 'publisher')}\r\n            />\r\n           </View>\r\n           <View>\r\n            <Button\r\n             large\r\n             leftIcon={{name: 'save'}}\r\n             title='Save'\r\n             onPress={() => {\r\n              if (this.state.isbn === '')\r\n               this.state.isbn = data.book.isbn;\r\n              if (this.state.title === '')\r\n               this.state.title = data.book.title;\r\n              if (this.state.author === '')\r\n               this.state.author = data.book.author;\r\n              if (this.state.description === '')\r\n               this.state.description = data.book.description;\r\n              if (this.state.publisher === '')\r\n               this.state.publisher = data.book.publisher;\r\n              if (this.state.published_year === '')\r\n               this.state.published_year = data.book.published_year;\r\n              updateBook({\r\n               variables: {\r\n                id: data.book._id,\r\n                isbn: this.state.isbn,\r\n                title: this.state.title,\r\n                author: this.state.author,\r\n                description: this.state.description,\r\n                publisher: this.state.publisher,\r\n                published_year: parseInt(this.state.published_year),\r\n               }\r\n              })\r\n               .then(res => res)\r\n               .catch(err => <Text>{err}</Text>);\r\n             }} />\r\n           </View>\r\n           {loading2 && <View style={styles.activity}>\r\n             <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n            </View>}\r\n           {error2 && <Text>`Error! ${error2.message}`</Text>}\r\n          </ScrollView>\r\n         )}\r\n        </Mutation>\r\n       );\r\n      }}\r\n     </Query>\r\n    );\r\n   }\r\n  }\r\n\r\n  const styles = StyleSheet.create({\r\n    container: {\r\n     flex: 1,\r\n     padding: 20\r\n    },\r\n    subContainer: {\r\n     flex: 1,\r\n     marginBottom: 20,\r\n     padding: 5,\r\n     borderBottomWidth: 2,\r\n     borderBottomColor: '#CCCCCC',\r\n    },\r\n    activity: {\r\n     position: 'absolute',\r\n     left: 0,\r\n     right: 0,\r\n     top: 0,\r\n     bottom: 0,\r\n     alignItems: 'center',\r\n     justifyContent: 'center'\r\n    },\r\n    textInput: {\r\n     fontSize: 18,\r\n     margin: 5,\r\n    },\r\n   })\r\n\r\nexport default EditBookScreen;","import React from 'react';\nimport { AppRegistry } from 'react-native';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { createAppContainer } from \"react-navigation\";\nimport BooksScreen from './components/BooksScreen';\nimport BookDetailScreen from './components/BookDetailScreen';\nimport AddBookScreen from './components/AddBookScreen';\nimport EditBookScreen from './components/EditBookScreen';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo';\n\nconst MainNavigator = createStackNavigator({\n Book: { screen: BooksScreen },\n BookDetails: { screen: BookDetailScreen },\n AddBook: { screen: AddBookScreen },\n EditBook: { screen: EditBookScreen },\n});\n\nconst MyRootComponent = createAppContainer(MainNavigator);\n\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n cache,\n link: new HttpLink({\n    uri: 'http://localhost:3000/graphql',\n }),\n});\n\nconst App = () => (\n <ApolloProvider client={client}>\n  <MyRootComponent />\n </ApolloProvider>\n);\n\nAppRegistry.registerComponent('MyApp', () => App);\n\nexport default App;"],"sourceRoot":""}